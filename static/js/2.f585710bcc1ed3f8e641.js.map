{"version":3,"sources":["webpack:///src/components/Opensource.vue","webpack:///./src/components/Opensource.vue?b80f","webpack:///./src/components/Opensource.vue","webpack:///./node_modules/marked/lib/marked.js"],"names":["Opensource","name","mounted","_this2","this","init","$http","get","then","res","$refs","marked","innerHTML","marked_default","data","flag","methods","toTop","timer","setInterval","top","document","documentElement","scrollTop","speed","clearInterval","_this","window","onscroll","backtop","components_Opensource","render","_h","$createElement","_c","_self","ref","staticClass","_v","style","display","attrs","type","icon","circle","on","click","staticRenderFns","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__","global","root","block","newline","code","fences","noop","hr","heading","nptable","blockquote","list","html","def","table","lheading","paragraph","text","Lexer","options","tokens","links","Object","create","defaults","rules","normal","pedantic","gfm","tables","_label","_title","edit","replace","getRegex","bullet","item","source","_tag","_comment","merge","lex","src","prototype","token","next","loose","cap","bull","b","listStart","listItems","t","space","i","tag","l","isordered","istask","ischecked","exec","substring","length","push","rtrim","lang","trim","depth","header","splitCells","align","split","cells","test","ordered","start","match","indexOf","RegExp","smartLists","slice","join","charAt","undefined","task","checked","sanitize","pre","sanitizer","toLowerCase","href","title","Error","charCodeAt","inline","escape","autolink","url","link","reflink","nolink","strong","em","br","del","InlineLexer","renderer","Renderer","breaks","TextRenderer","Parser","slugger","Slugger","seen","encode","escapeTest","escapeReplace","ch","replacements","escapeTestNoEncode","escapeReplaceNoEncode","unescape","_","n","String","fromCharCode","parseInt","regex","opt","val","cleanUrl","base","prot","decodeURIComponent","e","originIndependentUrl","baseUrls","resolveUrl","encodeURI","_punctuation","_escapes","_scheme","_email","_attribute","_href","_extended_email","_backpedal","output","prevCapZero","out","inLink","inRawBlock","lastParenIndex","findClosingBracket","removeChars","outputLink","escapes","codespan","mangle","smartypants","image","Math","random","toString","infostring","escaped","highlight","langPrefix","quote","level","raw","headerIds","headerPrefix","slug","xhtml","body","listitem","checkbox","tablerow","content","tablecell","flags","baseUrl","parse","inlineText","reverse","tok","pop","peek","parseText","row","cell","j","errMsg","silent","console","log","value","hasOwnProperty","originalSlug","&","<",">","\"","'","obj","target","key","arguments","call","tableRow","count","offset","str","curr","splice","c","invert","suffLen","currChar","substr","callback","pending","done","err","message","setOptions","getDefaults","parser","lexer","inlineLexer","module","exports"],"mappings":"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","file":"static/js/2.f585710bcc1ed3f8e641.js","sourcesContent":["<template>\n  <div>\n    <div ref=\"marked\" class=\"wrapper-marked\"></div>\n    <el-button\n      type=\"primary\"\n      icon=\"el-icon-arrow-up\"\n      circle\n      :style=\"{display: flag}\"\n      @click=\"toTop\"\n      class=\"to-top\"></el-button>\n  </div>\n</template>\n<script>\nimport marked from 'marked'\nexport default {\n  name: 'Opensource',\n  mounted () {\n    this.init()\n    this.$http.get('static/free-programming-books-zh_CN/README.md')\n      .then(res => {\n        this.$refs.marked.innerHTML = marked(res.data)\n      })\n  },\n  data () {\n    return {\n      flag: 'none'\n    }\n  },\n  methods: {\n    toTop () {\n      let timer = setInterval(function () {\n        const top = document.documentElement.scrollTop\n        const speed = top / 4\n        if (top <= 0) {\n          clearInterval(timer)\n        }\n        document.documentElement.scrollTop -= speed\n      }, 10)\n    },\n    init () {\n      const _this = this\n      window.onscroll = function () {\n        const backtop = document.documentElement.scrollTop\n        if (backtop > 800) {\n          _this.flag = 'block'\n        } else if (backtop < 400) {\n          _this.flag = 'none'\n        }\n      }\n    }\n  }\n}\n</script>\n<style scope=\"this api replaced by slot-scope in 2.5.0+\">\n  .wrapper-marked {\n    width: 1000px;\n    margin: auto;\n  }\n  .wrapper-marked > h2 {\n    font-size: 16px;\n  }\n  .wrapper-marked > ul {\n    display: flex;\n    width: 100%;\n    flex-wrap: wrap;\n  }\n  .wrapper-marked ul:nth-child(2) > li {\n    width: 150px;\n    font-size: 12px;\n    font-weight: bold;\n  }\n  .wrapper-marked ul:not(:nth-child(2)) {\n    border-radius: 20px;\n    background: #ffffff;\n    margin: 20px auto;\n    box-shadow: 0 4px 4px 0 #cccccc;\n  }\n  .wrapper-marked ul:not(:nth-child(2)) > li {\n    border-radius: 20px;\n    color: #0366d6;\n    font-weight: bold;\n    text-shadow: 2px 2px #cccccc;\n  }\n  .wrapper-marked ul:nth-child(2) > li > a:visited,\n  .wrapper-marked ul:nth-child(2) > li > a:link,\n  .wrapper-marked ul:nth-child(2) > li > a:active {\n    color: #888888;\n  }\n  .wrapper-marked ul:not(:nth-child(2)) > li > a,\n  .wrapper-marked ul:not(:nth-child(2)) > li > p > a {\n    color: #0366d6;\n    text-decoration: none;\n    text-shadow: 2px 2px #cccccc;\n    font-weight: bold;\n  }\n  .wrapper-marked > ul > li {\n    list-style: none;\n    width: 300px;\n    box-sizing: border-box;\n    border-radius: 10px;\n    margin: 10px 15px;\n    padding: 20px;\n    text-align: center;\n  }\n\n  .wrapper-marked > ul > li > a {\n    text-decoration: none;\n  }\n  .wrapper-marked > ul > li > p {\n    font-family: 'yaya';\n    font-weight: bold;\n    color: #444444;\n  }\n  .to-top {\n    position: fixed;\n    bottom: 20px;\n    right: 20px;\n  }\n  #目录 {\n    font-size: 20px;\n  }\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/Opensource.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{ref:\"marked\",staticClass:\"wrapper-marked\"}),_vm._v(\" \"),_c('el-button',{staticClass:\"to-top\",style:({display: _vm.flag}),attrs:{\"type\":\"primary\",\"icon\":\"el-icon-arrow-up\",\"circle\":\"\"},on:{\"click\":_vm.toTop}})],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-0ea7d06d\",\"hasScoped\":false,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/Opensource.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-0ea7d06d\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./Opensource.vue\")\n}\nvar normalizeComponent = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Opensource.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Opensource.vue\"\n/* template */\nimport __vue_template__ from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-0ea7d06d\\\",\\\"hasScoped\\\":false,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./Opensource.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/Opensource.vue\n// module id = null\n// module chunks = ","/**\n * marked - a markdown parser\n * Copyright (c) 2011-2018, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n;(function(root) {\n'use strict';\n\n/**\n * Block-Level Grammar\n */\n\nvar block = {\n  newline: /^\\n+/,\n  code: /^( {4}[^\\n]+\\n*)+/,\n  fences: noop,\n  hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)/,\n  heading: /^ *(#{1,6}) *([^\\n]+?) *(?:#+ *)?(?:\\n+|$)/,\n  nptable: noop,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( {0,3})(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,\n  html: '^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?\\\\?>\\\\n*' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?>\\\\n*' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\\\\n*' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (6)\n    + '|<(?!script|pre|style)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=\\\\h*\\\\n)[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (7) open tag\n    + '|</(?!script|pre|style)[a-z][\\\\w-]*\\\\s*>(?=\\\\h*\\\\n)[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (7) closing tag\n    + ')',\n  def: /^ {0,3}\\[(label)\\]: *\\n? *<?([^\\s>]+)>?(?:(?: +\\n? *| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noop,\n  lheading: /^([^\\n]+)\\n *(=|-){2,} *(?:\\n+|$)/,\n  paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading| {0,3}>|<\\/?(?:tag)(?: +|\\n|\\/?>)|<(?:script|pre|style|!--))[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\n\nblock._label = /(?!\\s*\\])(?:\\\\[\\[\\]]|[^\\[\\]])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n  .replace('label', block._label)\n  .replace('title', block._title)\n  .getRegex();\n\nblock.bullet = /(?:[*+-]|\\d{1,9}\\.)/;\nblock.item = /^( *)(bull) ?[^\\n]*(?:\\n(?!\\1bull ?)[^\\n]*)*/;\nblock.item = edit(block.item, 'gm')\n  .replace(/bull/g, block.bullet)\n  .getRegex();\n\nblock.list = edit(block.list)\n  .replace(/bull/g, block.bullet)\n  .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n  .replace('def', '\\\\n+(?=' + block.def.source + ')')\n  .getRegex();\n\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n  + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?-->/;\nblock.html = edit(block.html, 'i')\n  .replace('comment', block._comment)\n  .replace('tag', block._tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nblock.paragraph = edit(block.paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', block.heading)\n  .replace('lheading', block.lheading)\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.blockquote = edit(block.blockquote)\n  .replace('paragraph', block.paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  fences: /^ {0,3}(`{3,}|~{3,})([^`\\n]*)\\n(?:|([\\s\\S]*?)\\n)(?: {0,3}\\1[~`]* *(?:\\n+|$)|$)/,\n  paragraph: /^/,\n  heading: /^ *(#{1,6}) +([^\\n]+?) *#* *(?:\\n+|$)/\n});\n\nblock.gfm.paragraph = edit(block.paragraph)\n  .replace('(?!', '(?!'\n    + block.gfm.fences.source.replace('\\\\1', '\\\\2') + '|'\n    + block.list.source.replace('\\\\1', '\\\\3') + '|')\n  .getRegex();\n\n/**\n * GFM + Tables Block Grammar\n */\n\nblock.tables = merge({}, block.gfm, {\n  nptable: /^ *([^|\\n ].*\\|.*)\\n *([-:]+ *\\|[-| :]*)(?:\\n((?:.*[^>\\n ].*(?:\\n|$))*)\\n*|$)/,\n  table: /^ *\\|(.+)\\n *\\|?( *[-:]+[-| :]*)(?:\\n((?: *[^>\\n ].*(?:\\n|$))*)\\n*|$)/\n});\n\n/**\n * Pedantic grammar\n */\n\nblock.pedantic = merge({}, block.normal, {\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', block._comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/\n});\n\n/**\n * Block Lexer\n */\n\nfunction Lexer(options) {\n  this.tokens = [];\n  this.tokens.links = Object.create(null);\n  this.options = options || marked.defaults;\n  this.rules = block.normal;\n\n  if (this.options.pedantic) {\n    this.rules = block.pedantic;\n  } else if (this.options.gfm) {\n    if (this.options.tables) {\n      this.rules = block.tables;\n    } else {\n      this.rules = block.gfm;\n    }\n  }\n}\n\n/**\n * Expose Block Rules\n */\n\nLexer.rules = block;\n\n/**\n * Static Lex Method\n */\n\nLexer.lex = function(src, options) {\n  var lexer = new Lexer(options);\n  return lexer.lex(src);\n};\n\n/**\n * Preprocessing\n */\n\nLexer.prototype.lex = function(src) {\n  src = src\n    .replace(/\\r\\n|\\r/g, '\\n')\n    .replace(/\\t/g, '    ')\n    .replace(/\\u00a0/g, ' ')\n    .replace(/\\u2424/g, '\\n');\n\n  return this.token(src, true);\n};\n\n/**\n * Lexing\n */\n\nLexer.prototype.token = function(src, top) {\n  src = src.replace(/^ +$/gm, '');\n  var next,\n      loose,\n      cap,\n      bull,\n      b,\n      item,\n      listStart,\n      listItems,\n      t,\n      space,\n      i,\n      tag,\n      l,\n      isordered,\n      istask,\n      ischecked;\n\n  while (src) {\n    // newline\n    if (cap = this.rules.newline.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[0].length > 1) {\n        this.tokens.push({\n          type: 'space'\n        });\n      }\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      cap = cap[0].replace(/^ {4}/gm, '');\n      this.tokens.push({\n        type: 'code',\n        text: !this.options.pedantic\n          ? rtrim(cap, '\\n')\n          : cap\n      });\n      continue;\n    }\n\n    // fences (gfm)\n    if (cap = this.rules.fences.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'code',\n        lang: cap[2] ? cap[2].trim() : cap[2],\n        text: cap[3] || ''\n      });\n      continue;\n    }\n\n    // heading\n    if (cap = this.rules.heading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[1].length,\n        text: cap[2]\n      });\n      continue;\n    }\n\n    // table no leading pipe (gfm)\n    if (top && (cap = this.rules.nptable.exec(src))) {\n      item = {\n        type: 'table',\n        header: splitCells(cap[1].replace(/^ *| *\\| *$/g, '')),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3] ? cap[3].replace(/\\n$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        src = src.substring(cap[0].length);\n\n        for (i = 0; i < item.align.length; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        for (i = 0; i < item.cells.length; i++) {\n          item.cells[i] = splitCells(item.cells[i], item.header.length);\n        }\n\n        this.tokens.push(item);\n\n        continue;\n      }\n    }\n\n    // hr\n    if (cap = this.rules.hr.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'hr'\n      });\n      continue;\n    }\n\n    // blockquote\n    if (cap = this.rules.blockquote.exec(src)) {\n      src = src.substring(cap[0].length);\n\n      this.tokens.push({\n        type: 'blockquote_start'\n      });\n\n      cap = cap[0].replace(/^ *> ?/gm, '');\n\n      // Pass `top` to keep the current\n      // \"toplevel\" state. This is exactly\n      // how markdown.pl works.\n      this.token(cap, top);\n\n      this.tokens.push({\n        type: 'blockquote_end'\n      });\n\n      continue;\n    }\n\n    // list\n    if (cap = this.rules.list.exec(src)) {\n      src = src.substring(cap[0].length);\n      bull = cap[2];\n      isordered = bull.length > 1;\n\n      listStart = {\n        type: 'list_start',\n        ordered: isordered,\n        start: isordered ? +bull : '',\n        loose: false\n      };\n\n      this.tokens.push(listStart);\n\n      // Get each top-level item.\n      cap = cap[0].match(this.rules.item);\n\n      listItems = [];\n      next = false;\n      l = cap.length;\n      i = 0;\n\n      for (; i < l; i++) {\n        item = cap[i];\n\n        // Remove the list item's bullet\n        // so it is seen as the next token.\n        space = item.length;\n        item = item.replace(/^ *([*+-]|\\d+\\.) */, '');\n\n        // Outdent whatever the\n        // list item contains. Hacky.\n        if (~item.indexOf('\\n ')) {\n          space -= item.length;\n          item = !this.options.pedantic\n            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')\n            : item.replace(/^ {1,4}/gm, '');\n        }\n\n        // Determine whether the next list item belongs here.\n        // Backpedal if it does not belong in this list.\n        if (i !== l - 1) {\n          b = block.bullet.exec(cap[i + 1])[0];\n          if (bull.length > 1 ? b.length === 1\n            : (b.length > 1 || (this.options.smartLists && b !== bull))) {\n            src = cap.slice(i + 1).join('\\n') + src;\n            i = l - 1;\n          }\n        }\n\n        // Determine whether item is loose or not.\n        // Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/\n        // for discount behavior.\n        loose = next || /\\n\\n(?!\\s*$)/.test(item);\n        if (i !== l - 1) {\n          next = item.charAt(item.length - 1) === '\\n';\n          if (!loose) loose = next;\n        }\n\n        if (loose) {\n          listStart.loose = true;\n        }\n\n        // Check for task list items\n        istask = /^\\[[ xX]\\] /.test(item);\n        ischecked = undefined;\n        if (istask) {\n          ischecked = item[1] !== ' ';\n          item = item.replace(/^\\[[ xX]\\] +/, '');\n        }\n\n        t = {\n          type: 'list_item_start',\n          task: istask,\n          checked: ischecked,\n          loose: loose\n        };\n\n        listItems.push(t);\n        this.tokens.push(t);\n\n        // Recurse.\n        this.token(item, false);\n\n        this.tokens.push({\n          type: 'list_item_end'\n        });\n      }\n\n      if (listStart.loose) {\n        l = listItems.length;\n        i = 0;\n        for (; i < l; i++) {\n          listItems[i].loose = true;\n        }\n      }\n\n      this.tokens.push({\n        type: 'list_end'\n      });\n\n      continue;\n    }\n\n    // html\n    if (cap = this.rules.html.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: this.options.sanitize\n          ? 'paragraph'\n          : 'html',\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      });\n      continue;\n    }\n\n    // def\n    if (top && (cap = this.rules.def.exec(src))) {\n      src = src.substring(cap[0].length);\n      if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);\n      tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      if (!this.tokens.links[tag]) {\n        this.tokens.links[tag] = {\n          href: cap[2],\n          title: cap[3]\n        };\n      }\n      continue;\n    }\n\n    // table (gfm)\n    if (top && (cap = this.rules.table.exec(src))) {\n      item = {\n        type: 'table',\n        header: splitCells(cap[1].replace(/^ *| *\\| *$/g, '')),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3] ? cap[3].replace(/(?: *\\| *)?\\n$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        src = src.substring(cap[0].length);\n\n        for (i = 0; i < item.align.length; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        for (i = 0; i < item.cells.length; i++) {\n          item.cells[i] = splitCells(\n            item.cells[i].replace(/^ *\\| *| *\\| *$/g, ''),\n            item.header.length);\n        }\n\n        this.tokens.push(item);\n\n        continue;\n      }\n    }\n\n    // lheading\n    if (cap = this.rules.lheading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[2] === '=' ? 1 : 2,\n        text: cap[1]\n      });\n      continue;\n    }\n\n    // top-level paragraph\n    if (top && (cap = this.rules.paragraph.exec(src))) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'paragraph',\n        text: cap[1].charAt(cap[1].length - 1) === '\\n'\n          ? cap[1].slice(0, -1)\n          : cap[1]\n      });\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      // Top-level should never reach here.\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'text',\n        text: cap[0]\n      });\n      continue;\n    }\n\n    if (src) {\n      throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return this.tokens;\n};\n\n/**\n * Inline-Level Grammar\n */\n\nvar inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noop,\n  tag: '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>', // CDATA section\n  link: /^!?\\[(label)\\]\\(href(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(?!\\s*\\])((?:\\\\[\\[\\]]?|[^\\[\\]\\\\])+)\\]/,\n  nolink: /^!?\\[(?!\\s*\\])((?:\\[[^\\[\\]]*\\]|\\\\[\\[\\]]|[^\\[\\]])*)\\](?:\\[\\])?/,\n  strong: /^__([^\\s_])__(?!_)|^\\*\\*([^\\s*])\\*\\*(?!\\*)|^__([^\\s][\\s\\S]*?[^\\s])__(?!_)|^\\*\\*([^\\s][\\s\\S]*?[^\\s])\\*\\*(?!\\*)/,\n  em: /^_([^\\s_])_(?!_)|^\\*([^\\s*\"<\\[])\\*(?!\\*)|^_([^\\s][\\s\\S]*?[^\\s_])_(?!_|[^\\spunctuation])|^_([^\\s_][\\s\\S]*?[^\\s])_(?!_|[^\\spunctuation])|^\\*([^\\s\"<\\[][\\s\\S]*?[^\\s*])\\*(?!\\*)|^\\*([^\\s*\"<\\[][\\s\\S]*?[^\\s])\\*(?!\\*)/,\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noop,\n  text: /^(`+|[^`])[\\s\\S]*?(?=[\\\\<!\\[`*]|\\b_| {2,}\\n|$)/\n};\n\n// list of punctuation marks from common mark spec\n// without ` and ] to workaround Rule 17 (inline code blocks/links)\ninline._punctuation = '!\"#$%&\\'()*+,\\\\-./:;<=>?@\\\\[^_{|}~';\ninline.em = edit(inline.em).replace(/punctuation/g, inline._punctuation).getRegex();\n\ninline._escapes = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g;\n\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n  .replace('scheme', inline._scheme)\n  .replace('email', inline._email)\n  .getRegex();\n\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\n\ninline.tag = edit(inline.tag)\n  .replace('comment', block._comment)\n  .replace('attribute', inline._attribute)\n  .getRegex();\n\ninline._label = /(?:\\[[^\\[\\]]*\\]|\\\\[\\[\\]]?|`[^`]*`|[^\\[\\]\\\\])*?/;\ninline._href = /\\s*(<(?:\\\\[<>]?|[^\\s<>\\\\])*>|[^\\s\\x00-\\x1f]*)/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\n\ninline.link = edit(inline.link)\n  .replace('label', inline._label)\n  .replace('href', inline._href)\n  .replace('title', inline._title)\n  .getRegex();\n\ninline.reflink = edit(inline.reflink)\n  .replace('label', inline._label)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n  em: /^_(?=\\S)([\\s\\S]*?\\S)_(?!_)|^\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)/,\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', inline._label)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', inline._label)\n    .getRegex()\n});\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,\n  del: /^~+(?=\\S)([\\s\\S]*?\\S)~+/,\n  text: edit(inline.text)\n    .replace(']|', '~]|')\n    .replace('|$', '|https?://|ftp://|www\\\\.|[a-zA-Z0-9.!#$%&\\'*+/=?^_`{\\\\|}~-]+@|$')\n    .getRegex()\n});\n\ninline.gfm.url = edit(inline.gfm.url, 'i')\n  .replace('email', inline.gfm._extended_email)\n  .getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text).replace('{2,}', '*').getRegex()\n});\n\n/**\n * Inline Lexer & Compiler\n */\n\nfunction InlineLexer(links, options) {\n  this.options = options || marked.defaults;\n  this.links = links;\n  this.rules = inline.normal;\n  this.renderer = this.options.renderer || new Renderer();\n  this.renderer.options = this.options;\n\n  if (!this.links) {\n    throw new Error('Tokens array requires a `links` property.');\n  }\n\n  if (this.options.pedantic) {\n    this.rules = inline.pedantic;\n  } else if (this.options.gfm) {\n    if (this.options.breaks) {\n      this.rules = inline.breaks;\n    } else {\n      this.rules = inline.gfm;\n    }\n  }\n}\n\n/**\n * Expose Inline Rules\n */\n\nInlineLexer.rules = inline;\n\n/**\n * Static Lexing/Compiling Method\n */\n\nInlineLexer.output = function(src, links, options) {\n  var inline = new InlineLexer(links, options);\n  return inline.output(src);\n};\n\n/**\n * Lexing/Compiling\n */\n\nInlineLexer.prototype.output = function(src) {\n  var out = '',\n      link,\n      text,\n      href,\n      title,\n      cap,\n      prevCapZero;\n\n  while (src) {\n    // escape\n    if (cap = this.rules.escape.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += escape(cap[1]);\n      continue;\n    }\n\n    // tag\n    if (cap = this.rules.tag.exec(src)) {\n      if (!this.inLink && /^<a /i.test(cap[0])) {\n        this.inLink = true;\n      } else if (this.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.inLink = false;\n      }\n      if (!this.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.inRawBlock = true;\n      } else if (this.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.inRawBlock = false;\n      }\n\n      src = src.substring(cap[0].length);\n      out += this.options.sanitize\n        ? this.options.sanitizer\n          ? this.options.sanitizer(cap[0])\n          : escape(cap[0])\n        : cap[0];\n      continue;\n    }\n\n    // link\n    if (cap = this.rules.link.exec(src)) {\n      var lastParenIndex = findClosingBracket(cap[2], '()');\n      if (lastParenIndex > -1) {\n        var removeChars = cap[2].length - lastParenIndex;\n        cap[2] = cap[2].substring(0, lastParenIndex);\n        cap[0] = cap[0].substring(0, cap[0].length - removeChars);\n      }\n      src = src.substring(cap[0].length);\n      this.inLink = true;\n      href = cap[2];\n      if (this.options.pedantic) {\n        link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        } else {\n          title = '';\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n      href = href.trim().replace(/^<([\\s\\S]*)>$/, '$1');\n      out += this.outputLink(cap, {\n        href: InlineLexer.escapes(href),\n        title: InlineLexer.escapes(title)\n      });\n      this.inLink = false;\n      continue;\n    }\n\n    // reflink, nolink\n    if ((cap = this.rules.reflink.exec(src))\n        || (cap = this.rules.nolink.exec(src))) {\n      src = src.substring(cap[0].length);\n      link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = this.links[link.toLowerCase()];\n      if (!link || !link.href) {\n        out += cap[0].charAt(0);\n        src = cap[0].substring(1) + src;\n        continue;\n      }\n      this.inLink = true;\n      out += this.outputLink(cap, link);\n      this.inLink = false;\n      continue;\n    }\n\n    // strong\n    if (cap = this.rules.strong.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.strong(this.output(cap[4] || cap[3] || cap[2] || cap[1]));\n      continue;\n    }\n\n    // em\n    if (cap = this.rules.em.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.em(this.output(cap[6] || cap[5] || cap[4] || cap[3] || cap[2] || cap[1]));\n      continue;\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.codespan(escape(cap[2].trim(), true));\n      continue;\n    }\n\n    // br\n    if (cap = this.rules.br.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.br();\n      continue;\n    }\n\n    // del (gfm)\n    if (cap = this.rules.del.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.del(this.output(cap[1]));\n      continue;\n    }\n\n    // autolink\n    if (cap = this.rules.autolink.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[2] === '@') {\n        text = escape(this.mangle(cap[1]));\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // url (gfm)\n    if (!this.inLink && (cap = this.rules.url.exec(src))) {\n      if (cap[2] === '@') {\n        text = escape(cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules._backpedal.exec(cap[0])[0];\n        } while (prevCapZero !== cap[0]);\n        text = escape(cap[0]);\n        if (cap[1] === 'www.') {\n          href = 'http://' + text;\n        } else {\n          href = text;\n        }\n      }\n      src = src.substring(cap[0].length);\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (this.inRawBlock) {\n        out += this.renderer.text(cap[0]);\n      } else {\n        out += this.renderer.text(escape(this.smartypants(cap[0])));\n      }\n      continue;\n    }\n\n    if (src) {\n      throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return out;\n};\n\nInlineLexer.escapes = function(text) {\n  return text ? text.replace(InlineLexer.rules._escapes, '$1') : text;\n};\n\n/**\n * Compile Link\n */\n\nInlineLexer.prototype.outputLink = function(cap, link) {\n  var href = link.href,\n      title = link.title ? escape(link.title) : null;\n\n  return cap[0].charAt(0) !== '!'\n    ? this.renderer.link(href, title, this.output(cap[1]))\n    : this.renderer.image(href, title, escape(cap[1]));\n};\n\n/**\n * Smartypants Transformations\n */\n\nInlineLexer.prototype.smartypants = function(text) {\n  if (!this.options.smartypants) return text;\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n};\n\n/**\n * Mangle Links\n */\n\nInlineLexer.prototype.mangle = function(text) {\n  if (!this.options.mangle) return text;\n  var out = '',\n      l = text.length,\n      i = 0,\n      ch;\n\n  for (; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n};\n\n/**\n * Renderer\n */\n\nfunction Renderer(options) {\n  this.options = options || marked.defaults;\n}\n\nRenderer.prototype.code = function(code, infostring, escaped) {\n  var lang = (infostring || '').match(/\\S*/)[0];\n  if (this.options.highlight) {\n    var out = this.options.highlight(code, lang);\n    if (out != null && out !== code) {\n      escaped = true;\n      code = out;\n    }\n  }\n\n  if (!lang) {\n    return '<pre><code>'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>';\n  }\n\n  return '<pre><code class=\"'\n    + this.options.langPrefix\n    + escape(lang, true)\n    + '\">'\n    + (escaped ? code : escape(code, true))\n    + '</code></pre>\\n';\n};\n\nRenderer.prototype.blockquote = function(quote) {\n  return '<blockquote>\\n' + quote + '</blockquote>\\n';\n};\n\nRenderer.prototype.html = function(html) {\n  return html;\n};\n\nRenderer.prototype.heading = function(text, level, raw, slugger) {\n  if (this.options.headerIds) {\n    return '<h'\n      + level\n      + ' id=\"'\n      + this.options.headerPrefix\n      + slugger.slug(raw)\n      + '\">'\n      + text\n      + '</h'\n      + level\n      + '>\\n';\n  }\n  // ignore IDs\n  return '<h' + level + '>' + text + '</h' + level + '>\\n';\n};\n\nRenderer.prototype.hr = function() {\n  return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n};\n\nRenderer.prototype.list = function(body, ordered, start) {\n  var type = ordered ? 'ol' : 'ul',\n      startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n  return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n};\n\nRenderer.prototype.listitem = function(text) {\n  return '<li>' + text + '</li>\\n';\n};\n\nRenderer.prototype.checkbox = function(checked) {\n  return '<input '\n    + (checked ? 'checked=\"\" ' : '')\n    + 'disabled=\"\" type=\"checkbox\"'\n    + (this.options.xhtml ? ' /' : '')\n    + '> ';\n};\n\nRenderer.prototype.paragraph = function(text) {\n  return '<p>' + text + '</p>\\n';\n};\n\nRenderer.prototype.table = function(header, body) {\n  if (body) body = '<tbody>' + body + '</tbody>';\n\n  return '<table>\\n'\n    + '<thead>\\n'\n    + header\n    + '</thead>\\n'\n    + body\n    + '</table>\\n';\n};\n\nRenderer.prototype.tablerow = function(content) {\n  return '<tr>\\n' + content + '</tr>\\n';\n};\n\nRenderer.prototype.tablecell = function(content, flags) {\n  var type = flags.header ? 'th' : 'td';\n  var tag = flags.align\n    ? '<' + type + ' align=\"' + flags.align + '\">'\n    : '<' + type + '>';\n  return tag + content + '</' + type + '>\\n';\n};\n\n// span level renderer\nRenderer.prototype.strong = function(text) {\n  return '<strong>' + text + '</strong>';\n};\n\nRenderer.prototype.em = function(text) {\n  return '<em>' + text + '</em>';\n};\n\nRenderer.prototype.codespan = function(text) {\n  return '<code>' + text + '</code>';\n};\n\nRenderer.prototype.br = function() {\n  return this.options.xhtml ? '<br/>' : '<br>';\n};\n\nRenderer.prototype.del = function(text) {\n  return '<del>' + text + '</del>';\n};\n\nRenderer.prototype.link = function(href, title, text) {\n  href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n  if (href === null) {\n    return text;\n  }\n  var out = '<a href=\"' + escape(href) + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += '>' + text + '</a>';\n  return out;\n};\n\nRenderer.prototype.image = function(href, title, text) {\n  href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n  if (href === null) {\n    return text;\n  }\n\n  var out = '<img src=\"' + href + '\" alt=\"' + text + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += this.options.xhtml ? '/>' : '>';\n  return out;\n};\n\nRenderer.prototype.text = function(text) {\n  return text;\n};\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\n\nfunction TextRenderer() {}\n\n// no need for block level renderers\n\nTextRenderer.prototype.strong =\nTextRenderer.prototype.em =\nTextRenderer.prototype.codespan =\nTextRenderer.prototype.del =\nTextRenderer.prototype.text = function (text) {\n  return text;\n};\n\nTextRenderer.prototype.link =\nTextRenderer.prototype.image = function(href, title, text) {\n  return '' + text;\n};\n\nTextRenderer.prototype.br = function() {\n  return '';\n};\n\n/**\n * Parsing & Compiling\n */\n\nfunction Parser(options) {\n  this.tokens = [];\n  this.token = null;\n  this.options = options || marked.defaults;\n  this.options.renderer = this.options.renderer || new Renderer();\n  this.renderer = this.options.renderer;\n  this.renderer.options = this.options;\n  this.slugger = new Slugger();\n}\n\n/**\n * Static Parse Method\n */\n\nParser.parse = function(src, options) {\n  var parser = new Parser(options);\n  return parser.parse(src);\n};\n\n/**\n * Parse Loop\n */\n\nParser.prototype.parse = function(src) {\n  this.inline = new InlineLexer(src.links, this.options);\n  // use an InlineLexer with a TextRenderer to extract pure text\n  this.inlineText = new InlineLexer(\n    src.links,\n    merge({}, this.options, {renderer: new TextRenderer()})\n  );\n  this.tokens = src.reverse();\n\n  var out = '';\n  while (this.next()) {\n    out += this.tok();\n  }\n\n  return out;\n};\n\n/**\n * Next Token\n */\n\nParser.prototype.next = function() {\n  return this.token = this.tokens.pop();\n};\n\n/**\n * Preview Next Token\n */\n\nParser.prototype.peek = function() {\n  return this.tokens[this.tokens.length - 1] || 0;\n};\n\n/**\n * Parse Text Tokens\n */\n\nParser.prototype.parseText = function() {\n  var body = this.token.text;\n\n  while (this.peek().type === 'text') {\n    body += '\\n' + this.next().text;\n  }\n\n  return this.inline.output(body);\n};\n\n/**\n * Parse Current Token\n */\n\nParser.prototype.tok = function() {\n  switch (this.token.type) {\n    case 'space': {\n      return '';\n    }\n    case 'hr': {\n      return this.renderer.hr();\n    }\n    case 'heading': {\n      return this.renderer.heading(\n        this.inline.output(this.token.text),\n        this.token.depth,\n        unescape(this.inlineText.output(this.token.text)),\n        this.slugger);\n    }\n    case 'code': {\n      return this.renderer.code(this.token.text,\n        this.token.lang,\n        this.token.escaped);\n    }\n    case 'table': {\n      var header = '',\n          body = '',\n          i,\n          row,\n          cell,\n          j;\n\n      // header\n      cell = '';\n      for (i = 0; i < this.token.header.length; i++) {\n        cell += this.renderer.tablecell(\n          this.inline.output(this.token.header[i]),\n          { header: true, align: this.token.align[i] }\n        );\n      }\n      header += this.renderer.tablerow(cell);\n\n      for (i = 0; i < this.token.cells.length; i++) {\n        row = this.token.cells[i];\n\n        cell = '';\n        for (j = 0; j < row.length; j++) {\n          cell += this.renderer.tablecell(\n            this.inline.output(row[j]),\n            { header: false, align: this.token.align[j] }\n          );\n        }\n\n        body += this.renderer.tablerow(cell);\n      }\n      return this.renderer.table(header, body);\n    }\n    case 'blockquote_start': {\n      body = '';\n\n      while (this.next().type !== 'blockquote_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.blockquote(body);\n    }\n    case 'list_start': {\n      body = '';\n      var ordered = this.token.ordered,\n          start = this.token.start;\n\n      while (this.next().type !== 'list_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.list(body, ordered, start);\n    }\n    case 'list_item_start': {\n      body = '';\n      var loose = this.token.loose;\n\n      if (this.token.task) {\n        body += this.renderer.checkbox(this.token.checked);\n      }\n\n      while (this.next().type !== 'list_item_end') {\n        body += !loose && this.token.type === 'text'\n          ? this.parseText()\n          : this.tok();\n      }\n\n      return this.renderer.listitem(body);\n    }\n    case 'html': {\n      // TODO parse inline content if parameter markdown=1\n      return this.renderer.html(this.token.text);\n    }\n    case 'paragraph': {\n      return this.renderer.paragraph(this.inline.output(this.token.text));\n    }\n    case 'text': {\n      return this.renderer.paragraph(this.parseText());\n    }\n    default: {\n      var errMsg = 'Token with \"' + this.token.type + '\" type was not found.';\n      if (this.options.silent) {\n        console.log(errMsg);\n      } else {\n        throw new Error(errMsg);\n      }\n    }\n  }\n};\n\n/**\n * Slugger generates header id\n */\n\nfunction Slugger () {\n  this.seen = {};\n}\n\n/**\n * Convert string to unique id\n */\n\nSlugger.prototype.slug = function (value) {\n  var slug = value\n    .toLowerCase()\n    .trim()\n    .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '')\n    .replace(/\\s/g, '-');\n\n  if (this.seen.hasOwnProperty(slug)) {\n    var originalSlug = slug;\n    do {\n      this.seen[originalSlug]++;\n      slug = originalSlug + '-' + this.seen[originalSlug];\n    } while (this.seen.hasOwnProperty(slug));\n  }\n  this.seen[slug] = 0;\n\n  return slug;\n};\n\n/**\n * Helpers\n */\n\nfunction escape(html, encode) {\n  if (encode) {\n    if (escape.escapeTest.test(html)) {\n      return html.replace(escape.escapeReplace, function (ch) { return escape.replacements[ch]; });\n    }\n  } else {\n    if (escape.escapeTestNoEncode.test(html)) {\n      return html.replace(escape.escapeReplaceNoEncode, function (ch) { return escape.replacements[ch]; });\n    }\n  }\n\n  return html;\n}\n\nescape.escapeTest = /[&<>\"']/;\nescape.escapeReplace = /[&<>\"']/g;\nescape.replacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\n\nescape.escapeTestNoEncode = /[<>\"']|&(?!#?\\w+;)/;\nescape.escapeReplaceNoEncode = /[<>\"']|&(?!#?\\w+;)/g;\n\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(/&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig, function(_, n) {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nfunction edit(regex, opt) {\n  regex = regex.source || regex;\n  opt = opt || '';\n  return {\n    replace: function(name, val) {\n      val = val.source || val;\n      val = val.replace(/(^|[^\\[])\\^/g, '$1');\n      regex = regex.replace(name, val);\n      return this;\n    },\n    getRegex: function() {\n      return new RegExp(regex, opt);\n    }\n  };\n}\n\nfunction cleanUrl(sanitize, base, href) {\n  if (sanitize) {\n    try {\n      var prot = decodeURIComponent(unescape(href))\n        .replace(/[^\\w:]/g, '')\n        .toLowerCase();\n    } catch (e) {\n      return null;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n  return href;\n}\n\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (/^[^:]+:\\/*[^/]*$/.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n  base = baseUrls[' ' + base];\n\n  if (href.slice(0, 2) === '//') {\n    return base.replace(/:[\\s\\S]*/, ':') + href;\n  } else if (href.charAt(0) === '/') {\n    return base.replace(/(:\\/*[^/]*)[\\s\\S]*/, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\nvar baseUrls = {};\nvar originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\nfunction noop() {}\nnoop.exec = noop;\n\nfunction merge(obj) {\n  var i = 1,\n      target,\n      key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  var row = tableRow.replace(/\\|/g, function (match, offset, str) {\n        var escaped = false,\n            curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n        if (escaped) {\n          // odd number of slashes means | is escaped\n          // so we leave it alone\n          return '|';\n        } else {\n          // add space before unescaped |\n          return ' |';\n        }\n      }),\n      cells = row.split(/ \\|/),\n      i = 0;\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n\n// Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n// /c*$/ is vulnerable to REDOS.\n// invert: Remove suffix of non-c chars instead. Default falsey.\nfunction rtrim(str, c, invert) {\n  if (str.length === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  var suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < str.length) {\n    var currChar = str.charAt(str.length - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.substr(0, str.length - suffLen);\n}\n\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  var level = 0;\n  for (var i = 0; i < str.length; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\n/**\n * Marked\n */\n\nfunction marked(src, opt, callback) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked(): input parameter is of type '\n      + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  if (callback || typeof opt === 'function') {\n    if (!callback) {\n      callback = opt;\n      opt = null;\n    }\n\n    opt = merge({}, marked.defaults, opt || {});\n\n    var highlight = opt.highlight,\n        tokens,\n        pending,\n        i = 0;\n\n    try {\n      tokens = Lexer.lex(src, opt);\n    } catch (e) {\n      return callback(e);\n    }\n\n    pending = tokens.length;\n\n    var done = function(err) {\n      if (err) {\n        opt.highlight = highlight;\n        return callback(err);\n      }\n\n      var out;\n\n      try {\n        out = Parser.parse(tokens, opt);\n      } catch (e) {\n        err = e;\n      }\n\n      opt.highlight = highlight;\n\n      return err\n        ? callback(err)\n        : callback(null, out);\n    };\n\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n\n    delete opt.highlight;\n\n    if (!pending) return done();\n\n    for (; i < tokens.length; i++) {\n      (function(token) {\n        if (token.type !== 'code') {\n          return --pending || done();\n        }\n        return highlight(token.text, token.lang, function(err, code) {\n          if (err) return done(err);\n          if (code == null || code === token.text) {\n            return --pending || done();\n          }\n          token.text = code;\n          token.escaped = true;\n          --pending || done();\n        });\n      })(tokens[i]);\n    }\n\n    return;\n  }\n  try {\n    if (opt) opt = merge({}, marked.defaults, opt);\n    return Parser.parse(Lexer.lex(src, opt), opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if ((opt || marked.defaults).silent) {\n      return '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  merge(marked.defaults, opt);\n  return marked;\n};\n\nmarked.getDefaults = function () {\n  return {\n    baseUrl: null,\n    breaks: false,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: new Renderer(),\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartLists: false,\n    smartypants: false,\n    tables: true,\n    xhtml: false\n  };\n};\n\nmarked.defaults = marked.getDefaults();\n\n/**\n * Expose\n */\n\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\n\nmarked.Renderer = Renderer;\nmarked.TextRenderer = TextRenderer;\n\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\n\nmarked.InlineLexer = InlineLexer;\nmarked.inlineLexer = InlineLexer.output;\n\nmarked.Slugger = Slugger;\n\nmarked.parse = marked;\n\nif (typeof module !== 'undefined' && typeof exports === 'object') {\n  module.exports = marked;\n} else if (typeof define === 'function' && define.amd) {\n  define(function() { return marked; });\n} else {\n  root.marked = marked;\n}\n})(this || (typeof window !== 'undefined' ? window : global));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/marked/lib/marked.js\n// module id = EFqf\n// module chunks = 2"],"sourceRoot":""}